-- Character MAP for ARCHMB TEXT DRAWER

-- TODO
-- Desenho de Bomba
-- Desenho da bandeira
-- Parede horizontal
-- Parede Vertical
-- InterseÃ§Ã£o

Caracteres  modificados:
Bandeira: '{'
Bomba: '}'
Parede: '['


recebe entradaTeclado
verifica letra recebida
se letra = [w,a,s,d] entao
    verifica posicao
    se w entao:
        se pos - 14 >= 0 entao
            move para cima
    se a entao:
        se pos - 1 >= 0 entao
            move para esquerda
    se s entao:
        se pos + 14 < 196 entao
            move para baixo
    se d entao:
        se pos + 1 < 196 entao
            move para direita    
    mover ponteiro
senao se letra = [k,l] entao
    se k entao:
        se vetCampo1[pos] < 20
            se vetCampo1[pos] > 9
                tem bandeira, nao faz nada
            senao
                vetCampo1[pos] = 20
                revelaQuadrado
    senao
        se vetCampo1[pos] < 10
            vetCampo1[pos]+=10
            printa bandeira na posiÃ§Ã£o de vetCampo1
        senao
            vetCampo1[pos]-=10
            printa vazio, pois tirou a bandeira
    executa acao

converteCampoParaPixel: ðŸ¤”
    
    xPixel = ((posCampo % 14) * 2) + 1
    yPixel = ((posCampo / 14) * 2) + 1
    0 <= posCampo < 196

    pixel = yPixel * 40 + xPixel
    pixel = ((posCampo / 14) * 2 + 1) * 40 + ((posCampo % 14) * 2) + 1
    pixel = ((posCampo / 14) * 80) + ((posCampo % 14) * 2) + 41

    40 + 14 + 41 = 95
    0    14 + 41 = 55

Pegar os pixels em volta de uma posCampo

pixelCima = pixel - 40
pixelEmbaixo = pixel + 40
pixelDir eito = pixel + 1
pixelEsquerdo = pixel - 1

pixelSupDir = pixelCima + 1
pixelSupEsq = pixelCima - 1
pixelInfDir = pixelBaixo + 1
pixelInfEsq = pixelBaixo - 1


revelaQuadrado0:
    
    ; pos - 14 vai estar em X
    se pos - 14 >= 0 entao
        chamadaRecursiva
    
    se pos - 1 >= 0 entao
        chamadaRecursiva
    
    se pos + 14 < 196 entao
      chamadaRecursiva
    
    se pos + 1 < 196 entao
       chamadaRecursiva

    chamadaRecursiva:
        se vetCampo1[X(ALGUM REGISTRADOR)] < 20 (nÃ£o foi revelado)
            posPonteiro = X(ALGUM REGISTRADOR)
            revelaQuadrado


revelaQuadrado0:

    se pos-14 < 0
        sai
    se vetCampo[pos-14] < 20
        posPonteiro = posPonteiro - 14
        revelaQuadrado
    
    se pos + 14 >= 196
        sai
    se vetCampo[pos+14] < 20
        posPonteiro = posPonteiro + 14
        revelaQuadrado
        
    se pos-1 < 0
        sai
    se vetCampo[pos-1] < 20
        posPonteiro = posPonteiro - 1
        revelaQuadrado

    se pos + 1 >= 196
        sai
    se vetCampo[pos+1] < 20
        posPonteiro = posPonteiro + 1
        revelaQuadrado



revelaQuadrado:
    revelar
    se posCampo == 0 
        revelaQuadrado0

func:
	loadn r0, #vetCampo1
	loop:
		loadi r2, r0
		store #vetCampo r2
		inc r0



Quando tem um zero, revela TODOS os quadrados em volta dele, quando revela o quadrado, se ele for zero tambÃ©m, revela todos em volta dele tambÃ©m

============================================================================================================

Planejamento para o vÃ­deo de apresentaÃ§Ã£o do Jogo:

1. Apresentar o jogo em si (recursos do jogo, walkthrough)
    1.1. Menu
        - Falar das 3 dificuldades que fizemos
        
    1.2. Jogar um pouco do nÃ­vel Facil
       1.2.1 Falar do campo
            - 14x14
            - NÃºmero de bombas depende da dificuldade
       1.2.2 Falar dos controles
            - WASD
            - J: selecionar
            - K: inserir bandeira
       1.2.3 Mostrar o contador de bandeiras
       1.2.4 Mostrar o clique
            - Falar da funÃ§Ã£o recursiva que mostra todos os quadrados 0. 
            - Backtracking
            - a Ã¡rea descoberta sempre faz fronteira com algo que nÃ£o eh bomba
       1.2.5 Mostrar Tela de Vitoria
       
    1.3. Entrar no nivel medio/dificil
        - jogar um pouco
        - perder propositalmente
        - Mostrar tela de derrota


2. Agora, mostrar a construÃ§Ã£o do cÃ³digo em si
    2.1 Nos baseamos no PDF de instruÃ§Ãµes disponibilizado no Gitlab da disciplina
    2.2 Olhamos exemplos de projetos dos anos passados
    2.3 FunÃ§Ã£o main e startGame
        - Fica esperando o usuÃ¡rio apertar algum botÃ£o do teclado para assim realizar a aÃ§Ã£o


3. Falar das variÃ¡veis que criamos para string e campo
    3.1 Mostrar diagrama do campo e, a partir dele, explicar a montagem do campo usando uma abordagem unidimensional (vetor e varias tags)
        - Mostrar o grid no inkscape
        - Mostrar o grid do campo com as estrelas onde estariam as bombas
    3.2 Mostrar parte artistica 
        - mostrar strings exibidas na tela , como bomba , bandeira etc
            - exibir como ocorre a impressao (de linha a linha, etc)
        - mostrar .mif e indicar quais caracteres foram Â´sacrificadosÂ´ para o projeto

4. Falar das funÃ§Ãµes e dar destaque Ã s funÃ§Ã£o do J e do K e principalmente da funÃ§Ã£o recursiva
    4.1 FunÃ§Ã£o de calcular o posPonteiro
        - VariÃ¡vel de 0 atÃ© 195
        - A funÃ§Ã£o calcula qual serÃ¡ a posiÃ§Ã£o central relativa Ã quele valor para pintar em volta

    4.2 WASD - Movimento do ponteiro no jogo no campo 14x14
        - Somar ou subtrair 1 ou 14 para mover o ponteiro

    4.3 FunÃ§Ã£o de clique
        4.1.1 Verifica se o campo jÃ¡ nÃ£o foi revelado
        4.1.2 Verifica se tem bandeira
        4.1.3 Se tiver bomba, dÃ¡ game-over
        
    4.4 FunÃ§Ã£o de colocar bandeira
        4.2.1 Verificar se o campo jÃ¡ nÃ£o foi revelado
        4.2.2 Verificar se tem bandeira, se tiver tira a bandeira (-10)
        4.2.3 Por fim, coloca a bandeira (+10)


5. ConsideraÃ§Ãµes finais (OPCIONAL)
    5.1 Dizer o que aprendeu
        - A realizaÃ§Ã£o do jogo permitiu entender o comeÃ§o , meio e fim de um projeto funcional usando Assembly
        - Exercitar os conceitos de Stack e a montar GUI usando uma linguagem de baixissimo nivel
    5.2 Agradecimentos
        - obg prof Simoes (sqn) pela acessoria durante o projeto, e aos veteranos tbm